{"version":3,"sources":["components/PageContainer.tsx","assets/fonts.ts","assets/colors.ts","components/Text.tsx","utilities/xmlParser.ts","utilities/validateUpload.ts","components/FileUploader.tsx","utilities/processData.ts","components/TimeSeriesGraph.tsx","components/DateInput.tsx","components/GraphSelector.tsx","components/DataContainer.tsx","App.tsx","index.tsx"],"names":["PageContainer","children","style","width","window","innerWidth","height","innerHeight","display","alignItems","justifyContent","padding","position","left","top","fontFamily","fonts","primary","small","fontSize","medium","large","color","secondary","footer","Text","parseXML","xmlData","options","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","trimValues","cdataTagName","cdataPositionChar","parseTrueNumberOnly","numParseOptions","hex","leadingZeros","arrayMode","attrValueProcessor","val","he","decode","isAttributeValue","tagValueProcessor","stopNodes","parser","validate","jsonObj","parse","inputJson","HealthData","Record","element","attr","type","FileUploader","onDrop","onUpload","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","setTimeout","textString","result","parsedXML","undefined","alert","readAsText","getOnDrop","useDropzone","getRootProps","getInputProps","Box","sx","borderRadius","bgcolor","borderColor","m","border","processData","newTimeSeriesCollection","filter","value","startDate","unit","timeSeriesDatum","startTime","DateTime","fromISO","appleInput","chunks","split","getISODateFormat","Number","x","y","getTimeSeriesDataPoint","dataType","replace","dataSet","push","input","Object","values","sort","a","b","diff","milliseconds","sortTimeSeriesCollection","TimeSeriesGraph","timeSeries","state","labels","map","datum","datasets","label","backgroundColor","borderWidth","data","title","text","legend","scales","DateInput","GraphSelector","timeSeriesCollection","selectedTimeSeries","setSelectedTimeSeries","minWidth","maxWidth","FormControl","fullWidth","InputLabel","id","Select","labelId","onChange","event","target","index","MenuItem","DataContainer","useState","setTimeSeriesCollection","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdaad86a.chunk.js","sourcesContent":["import React, { ReactElement, ReactNode } from \"react\";\n\nexport const PageContainer = ({\n  children,\n}: {\n  children: ReactNode;\n}): ReactElement => (\n  <div\n    style={{\n      width: window.innerWidth,\n      height: window.innerHeight,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n  >\n    <div\n      style={{\n        padding: 24,\n        width: \"80%\",\n        height: \"100%\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n      }}\n    >\n      {children}\n    </div>\n  </div>\n);\n","import { colors } from \"./colors\";\n\nconst fontSize = {\n  footer: 12,\n  small: 14,\n  medium: 16,\n  large: 20,\n};\nconst fontFamily = \"verdana\";\nexport const fonts = {\n  primary: {\n    small: { fontSize: fontSize.small, fontFamily },\n    medium: {},\n    large: {},\n    display: { fontSize: fontSize.large, fontFamily, color: colors.red },\n  },\n  secondary: {\n    footer: { fontSize: fontSize.footer, fontFamily, color: colors.grey },\n    small: {},\n    medium: {},\n    large: {},\n    display: {},\n  },\n};\n","export const colors = {\n  red: \"#d63e13\",\n  green: \"green\",\n  lightBlue: \"#99c3fa\",\n  darkBlue: \"#8ab0e1\",\n  grey: \"#333333\",\n};\n","import { fonts } from \"../assets/fonts\";\nimport React, { CSSProperties, ReactElement, ReactNode } from \"react\";\n\nexport const Text = ({\n  style,\n  children,\n}: {\n  style?: CSSProperties;\n  children: ReactNode;\n}): ReactElement => (\n  <div style={{ ...fonts.primary.small, ...style }}>{children}</div>\n);\n","import he from \"he\";\n\nimport parser from \"fast-xml-parser\";\nimport { UploadData, validate } from \"./validateUpload\";\n\nexport const parseXML = (xmlData: string): UploadData | undefined => {\n  interface Options {\n    ignoreAttributes: boolean;\n    attrValueProcessor: (val: string) => string;\n    attrNodeName: string;\n    trimValues: boolean;\n    textNodeName: string;\n    cdataTagName: string;\n    attributeNamePrefix: string;\n    parseAttributeValue: boolean;\n    parseNodeValue: boolean;\n    parseTrueNumberOnly: boolean;\n    cdataPositionChar: string;\n    arrayMode: boolean;\n    numParseOptions: { hex: boolean; leadingZeros: boolean };\n    tagValueProcessor: (val: string) => string;\n    ignoreNameSpace: boolean;\n    allowBooleanAttributes: boolean;\n    stopNodes: string[];\n  }\n\n  const options: Options = {\n    attributeNamePrefix: \"\",\n    attrNodeName: \"attr\", //default is 'false'\n    textNodeName: \"#text\",\n    ignoreAttributes: false,\n    ignoreNameSpace: false,\n    allowBooleanAttributes: false,\n    parseNodeValue: true,\n    parseAttributeValue: false,\n    trimValues: true,\n    cdataTagName: \"__cdata\", //default is 'false'\n    cdataPositionChar: \"\\\\c\",\n    parseTrueNumberOnly: false,\n    numParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      //skipLike: /\\+[0-9]{10}/\n    },\n    arrayMode: false, //\"strict\"\n    attrValueProcessor: (val) => he.decode(val, { isAttributeValue: true }), //default is a=>a\n    tagValueProcessor: (val) => he.decode(val), //default is a=>a\n    stopNodes: [\"parse-me-as-string\"],\n  };\n\n  if (parser.validate(xmlData) === true) {\n    //optional (it'll return an object in case it's not valid)\n    const jsonObj = parser.parse(xmlData, options);\n    if (validate(jsonObj)) {\n      return jsonObj;\n    }\n  }\n  return undefined;\n};\n","/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction validate(inputJson: Record<string, any>): inputJson is UploadData {\n  if (!inputJson.HealthData) return false;\n  if (!inputJson.HealthData.Record) return false;\n  for (const element of inputJson.HealthData.Record) {\n    if (!element.attr) return false;\n    if (!element.attr.type) return false;\n  }\n  return true;\n}\n\ninterface UploadData {\n  HealthData: {\n    Record: Element[];\n  };\n}\n\ninterface Element {\n  attr: Attribute;\n}\n\ninterface Attribute {\n  type: string;\n  value?: string;\n  startDate?: string;\n  unit?: string;\n}\n\nexport { validate };\nexport type { UploadData, Element, Attribute };\n","import React, { ReactElement, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Text } from \"./Text\";\nimport { parseXML } from \"../utilities/xmlParser\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { Box } from \"@mui/material\";\n\nfunction getOnDrop(onUpload: (input: UploadData) => void) {\n  return useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () =>\n        setTimeout(() => {\n          const textString = reader.result;\n          const parsedXML = parseXML(textString as string);\n          if (parsedXML !== undefined) {\n            onUpload(parsedXML);\n          } else {\n            alert(\"Uploaded file does not have expected properties\");\n          }\n        }, 1);\n      reader.readAsText(file);\n    });\n  }, []);\n}\n\nexport function FileUploader({\n  onUpload,\n}: {\n  onUpload: (input: UploadData) => void;\n}): ReactElement {\n  const onDrop = getOnDrop(onUpload);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n  return (\n    <Box\n      sx={{\n        borderRadius: \"16px\",\n        bgcolor: \"background.paper\",\n        borderColor: \"text.primary\",\n        m: 1,\n        border: 1,\n        width: 240,\n      }}\n    >\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <Text style={{ padding: \"5px\" }}>Click here to upload an XML file</Text>\n      </div>\n    </Box>\n  );\n}\n","import { DateTime } from \"luxon\";\nimport { Element, UploadData } from \"./validateUpload\";\n\nexport interface TimeSeriesDatum {\n  x: DateTime;\n  y: number;\n}\n\nexport interface TimeSeries {\n  type: string;\n  unit: string;\n  dataSet: TimeSeriesDatum[];\n}\n\nexport function processData(inputJson: UploadData): Record<string, TimeSeries> {\n  const newTimeSeriesCollection: Record<string, TimeSeries> = {};\n\n  const timeSeriesRaw = inputJson.HealthData.Record.filter(\n    (element: Element): element is RawTimeSeriesDatum =>\n      element.attr.value !== undefined &&\n      element.attr.startDate !== undefined &&\n      element.attr.type !== undefined &&\n      element.attr.unit !== undefined\n  );\n\n  timeSeriesRaw.forEach((element) => {\n    const timeSeriesDatum = getTimeSeriesDataPoint(element);\n    const dataType = trimDataType(element.attr.type);\n    const unit = element.attr.unit;\n\n    if (!(dataType in newTimeSeriesCollection)) {\n      newTimeSeriesCollection[dataType] = {\n        type: dataType,\n        unit: unit,\n        dataSet: [timeSeriesDatum],\n      };\n    } else {\n      newTimeSeriesCollection[dataType].dataSet.push(timeSeriesDatum);\n    }\n  });\n  return sortTimeSeriesCollection(newTimeSeriesCollection);\n}\n\ninterface RawTimeSeriesDatum {\n  attr: TimeSeriesAttribute;\n}\n\ninterface TimeSeriesAttribute {\n  type: string;\n  value: string;\n  startDate: string;\n  unit: string;\n}\n\nfunction getTimeSeriesDataPoint(element: RawTimeSeriesDatum): TimeSeriesDatum {\n  const startTime = DateTime.fromISO(getISODateFormat(element.attr.startDate));\n  const value = Number(element.attr.value);\n  return { x: startTime, y: value };\n}\n\n// Input format is 2021-03-20 20:12:15 +1000\n// ISO input format is 2021-03-20T20:12:15+1000\n// We replace the first space with a T, and the second gets trimmed\n\nexport function getISODateFormat(appleInput: string): string {\n  const chunks = appleInput.split(\" \");\n  return chunks[0] + \"T\" + chunks[1] + chunks[2];\n}\n\nfunction sortTimeSeriesCollection(\n  input: Record<string, TimeSeries>\n): Record<string, TimeSeries> {\n  for (const value of Object.values(input)) {\n    value.dataSet.sort(\n      (a: TimeSeriesDatum, b: TimeSeriesDatum) => b.x.diff(a.x).milliseconds\n    );\n  }\n  return input;\n}\n\nfunction trimDataType(input: string): string {\n  input = input.replace(\"HKQuantityTypeIdentifier\", \"\");\n  input = input.replace(\"HKDataType\", \"\");\n  input = input.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n  return input;\n}\n","import React, { ReactElement } from \"react\";\nimport { TimeSeries } from \"../utilities/processData\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\n\nexport function TimeSeriesGraph({\n  timeSeries,\n}: {\n  timeSeries: TimeSeries;\n}): ReactElement {\n  const state = {\n    labels: timeSeries.dataSet.map((datum) => datum.x),\n    datasets: [\n      {\n        label: timeSeries.type,\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: timeSeries.dataSet.map((element) => element.y),\n      },\n    ],\n  };\n  return (\n    <Line\n      data={state}\n      options={\n        {\n          title: {\n            display: true,\n            text: timeSeries.type,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n          scales: {\n            x: {\n              type: \"time\",\n              display: true,\n              title: {\n                display: true,\n              },\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: timeSeries.unit,\n              },\n            },\n          },\n        } as any // eslint-disable-line @typescript-eslint/no-explicit-any\n      }\n    />\n  );\n}\n","import React, { ReactElement } from \"react\";\n// import moment from \"moment\";\n\nexport function DateInput(): ReactElement {\n  // setLifestyleChangeDate: React.Dispatch<\n  //   React.SetStateAction<moment.Moment | undefined>\n  // >\n  return <div />;\n}\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { TimeSeries } from \"../utilities/processData\";\nimport { ReactElement } from \"react\";\n\nexport default function GraphSelector({\n  timeSeriesCollection,\n  selectedTimeSeries,\n  setSelectedTimeSeries,\n}: {\n  timeSeriesCollection: Record<string, TimeSeries>;\n  selectedTimeSeries: string;\n  setSelectedTimeSeries: React.Dispatch<React.SetStateAction<string>>;\n}): ReactElement {\n  const handleChange = (event: SelectChangeEvent) => {\n    setSelectedTimeSeries(event.target.value as string);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120, maxWidth: 500, padding: 1 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"timeseries-select\">Data Set</InputLabel>\n        <Select\n          labelId=\"timeseries-select-label\"\n          id=\"timeseries-select\"\n          value={selectedTimeSeries}\n          label=\"Select a data type to explore\"\n          onChange={handleChange}\n        >\n          {Object.values(timeSeriesCollection).map((timeSeries, index) => (\n            <MenuItem value={timeSeries.type} key={index}>\n              {timeSeries.type}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { FileUploader } from \"./FileUploader\";\nimport { processData, TimeSeries } from \"../utilities/processData\";\nimport { TimeSeriesGraph } from \"./TimeSeriesGraph\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { DateInput } from \"./DateInput\";\nimport GraphSelector from \"./GraphSelector\";\n// import moment from \"moment\";\n\nexport function DataContainer(): ReactElement {\n  const [timeSeriesCollection, setTimeSeriesCollection] =\n    useState<Record<string, TimeSeries>>();\n  const [selectedTimeSeries, setSelectedTimeSeries] = useState<string>(\"\");\n  // const [lifestyleChangeDate, setLifestyleChangeDate] = useState<\n  //   moment.Moment | undefined\n  // >(undefined);\n\n  function onUpload(input: UploadData): void {\n    setTimeSeriesCollection(processData(input));\n  }\n\n  return (\n    <div>\n      <FileUploader onUpload={onUpload} />\n      <DateInput />\n      {!!timeSeriesCollection && (\n        <GraphSelector\n          timeSeriesCollection={timeSeriesCollection}\n          selectedTimeSeries={selectedTimeSeries}\n          setSelectedTimeSeries={setSelectedTimeSeries}\n        />\n      )}\n      {!!timeSeriesCollection && !!timeSeriesCollection[selectedTimeSeries] && (\n        <TimeSeriesGraph\n          timeSeries={timeSeriesCollection[selectedTimeSeries]}\n        />\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { PageContainer } from \"./components\";\nimport { DataContainer } from \"./components/DataContainer\";\n\nfunction App(): ReactElement {\n  return (\n    <PageContainer>\n      <DataContainer />\n    </PageContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}