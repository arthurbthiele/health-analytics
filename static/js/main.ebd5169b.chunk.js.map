{"version":3,"sources":["components/PageContainer.tsx","assets/fonts.ts","assets/colors.ts","components/Text.tsx","utilities/xmlParser.ts","utilities/validateUpload.ts","components/FileUploader.tsx","utilities/processData.ts","components/DateInput.tsx","components/GraphSelector.tsx","assets/standardDataTypes.ts","components/RandomDataGenerator.tsx","components/Analytics.tsx","components/TimeseriesGraph.tsx","components/DataContainer.tsx","App.tsx","index.tsx"],"names":["PageContainer","children","style","width","window","innerWidth","height","innerHeight","display","alignItems","justifyContent","padding","position","left","top","fontFamily","fonts","primary","small","fontSize","medium","large","color","secondary","footer","Text","parseXML","xmlData","options","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","trimValues","cdataTagName","cdataPositionChar","parseTrueNumberOnly","numParseOptions","hex","leadingZeros","arrayMode","attrValueProcessor","val","he","decode","isAttributeValue","tagValueProcessor","stopNodes","parser","validate","jsonObj","parse","inputJson","HealthData","Record","element","attr","type","FileUploader","onDrop","onUpload","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","setTimeout","textString","result","parsedXML","undefined","alert","readAsText","getOnDrop","useDropzone","getRootProps","getInputProps","Box","sx","borderRadius","bgcolor","borderColor","m","border","processData","timeseriesCollection","filter","value","startDate","unit","timeseriesDatum","startTime","DateTime","fromISO","appleInput","chunks","split","getISODateFormat","Number","x","y","getTimeseriesDataPoint","dataType","replace","dataSet","push","input","Object","values","sort","a","b","diff","milliseconds","sortTimeseriesCollection","DateInput","handleChange","LocalizationProvider","dateAdapter","AdapterDateFns","DesktopDatePicker","label","inputFormat","onChange","renderInput","params","TextField","GraphSelector","selectedTimeseries","setSelectedTimeseries","minWidth","maxWidth","FormControl","fullWidth","InputLabel","id","Select","labelId","event","target","map","timeseries","index","MenuItem","dataTypeStandardValues","name","statistics","mean","dev","RandomDataGenerator","onDataGeneration","onClick","end","now","start","minus","days","dates","interval","cursor","startOf","output","plus","Interval","fromDateTimes","it","iterator","date","next","generateRandomDataSet","Analytics","splitDate","splitTimeseries","inputDate","length","before","after","splitIndex","findIndex","nonDataSetParams","beforeTimeseries","slice","afterTimeseries","splitTimeseriesOnDate","getAnalytics","hypothesis","average","pValue","permutationTest","datum","getSplitTimeseriesAnalytics","analyticsDate","count","deviation","sampleStandardDeviation","TimeseriesGraph","state","labels","datasets","backgroundColor","borderWidth","data","title","text","legend","scales","DataContainer","useState","setTimeseriesCollection","React","setAnalyticsDate","flexDirection","newValue","fromJSDate","toJSDate","App","document","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebd5169b.chunk.js","sourcesContent":["import React, { ReactElement, ReactNode } from \"react\";\n\nexport const PageContainer = ({\n  children,\n}: {\n  children: ReactNode;\n}): ReactElement => (\n  <div\n    style={{\n      width: window.innerWidth,\n      height: window.innerHeight,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n  >\n    <div\n      style={{\n        padding: 24,\n        width: \"80%\",\n        height: \"100%\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n      }}\n    >\n      {children}\n    </div>\n  </div>\n);\n","import { colors } from \"./colors\";\n\nconst fontSize = {\n  footer: 12,\n  small: 14,\n  medium: 16,\n  large: 20,\n};\nconst fontFamily = \"verdana\";\nexport const fonts = {\n  primary: {\n    small: { fontSize: fontSize.small, fontFamily },\n    medium: {},\n    large: {},\n    display: { fontSize: fontSize.large, fontFamily, color: colors.red },\n  },\n  secondary: {\n    footer: { fontSize: fontSize.footer, fontFamily, color: colors.grey },\n    small: {},\n    medium: {},\n    large: {},\n    display: {},\n  },\n};\n","export const colors = {\n  red: \"#d63e13\",\n  green: \"green\",\n  lightBlue: \"#99c3fa\",\n  darkBlue: \"#8ab0e1\",\n  grey: \"#333333\",\n};\n","import { fonts } from \"../assets/fonts\";\nimport React, { CSSProperties, ReactElement, ReactNode } from \"react\";\n\nexport const Text = ({\n  style,\n  children,\n}: {\n  style?: CSSProperties;\n  children: ReactNode;\n}): ReactElement => (\n  <div style={{ ...fonts.primary.small, ...style }}>{children}</div>\n);\n","import he from \"he\";\n\nimport parser from \"fast-xml-parser\";\nimport { UploadData, validate } from \"./validateUpload\";\n\nexport const parseXML = (xmlData: string): UploadData | undefined => {\n  interface Options {\n    ignoreAttributes: boolean;\n    attrValueProcessor: (val: string) => string;\n    attrNodeName: string;\n    trimValues: boolean;\n    textNodeName: string;\n    cdataTagName: string;\n    attributeNamePrefix: string;\n    parseAttributeValue: boolean;\n    parseNodeValue: boolean;\n    parseTrueNumberOnly: boolean;\n    cdataPositionChar: string;\n    arrayMode: boolean;\n    numParseOptions: { hex: boolean; leadingZeros: boolean };\n    tagValueProcessor: (val: string) => string;\n    ignoreNameSpace: boolean;\n    allowBooleanAttributes: boolean;\n    stopNodes: string[];\n  }\n\n  const options: Options = {\n    attributeNamePrefix: \"\",\n    attrNodeName: \"attr\", //default is 'false'\n    textNodeName: \"#text\",\n    ignoreAttributes: false,\n    ignoreNameSpace: false,\n    allowBooleanAttributes: false,\n    parseNodeValue: true,\n    parseAttributeValue: false,\n    trimValues: true,\n    cdataTagName: \"__cdata\", //default is 'false'\n    cdataPositionChar: \"\\\\c\",\n    parseTrueNumberOnly: false,\n    numParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      //skipLike: /\\+[0-9]{10}/\n    },\n    arrayMode: false, //\"strict\"\n    attrValueProcessor: (val) => he.decode(val, { isAttributeValue: true }), //default is a=>a\n    tagValueProcessor: (val) => he.decode(val), //default is a=>a\n    stopNodes: [\"parse-me-as-string\"],\n  };\n\n  if (parser.validate(xmlData) === true) {\n    //optional (it'll return an object in case it's not valid)\n    const jsonObj = parser.parse(xmlData, options);\n    if (validate(jsonObj)) {\n      return jsonObj;\n    }\n  }\n  return undefined;\n};\n","/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction validate(inputJson: Record<string, any>): inputJson is UploadData {\n  if (!inputJson.HealthData) return false;\n  if (!inputJson.HealthData.Record) return false;\n  for (const element of inputJson.HealthData.Record) {\n    if (!element.attr) return false;\n    if (!element.attr.type) return false;\n  }\n  return true;\n}\n\ninterface UploadData {\n  HealthData: {\n    Record: Element[];\n  };\n}\n\ninterface Element {\n  attr: Attribute;\n}\n\ninterface Attribute {\n  type: string;\n  value?: string;\n  startDate?: string;\n  unit?: string;\n}\n\nexport { validate };\nexport type { UploadData, Element, Attribute };\n","import React, { ReactElement, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Text } from \"./Text\";\nimport { parseXML } from \"../utilities/xmlParser\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { Box } from \"@mui/material\";\n\nfunction getOnDrop(onUpload: (input: UploadData) => void) {\n  return useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () =>\n        setTimeout(() => {\n          const textString = reader.result;\n          const parsedXML = parseXML(textString as string);\n          if (parsedXML !== undefined) {\n            onUpload(parsedXML);\n          } else {\n            alert(\"Uploaded file does not have expected properties\");\n          }\n        }, 1);\n      reader.readAsText(file);\n    });\n  }, []);\n}\n\nexport function FileUploader({\n  onUpload,\n}: {\n  onUpload: (input: UploadData) => void;\n}): ReactElement {\n  const onDrop = getOnDrop(onUpload);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n  return (\n    <Box\n      sx={{\n        borderRadius: \"16px\",\n        bgcolor: \"background.paper\",\n        borderColor: \"text.primary\",\n        m: 1,\n        border: 1,\n        width: 240,\n      }}\n    >\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <Text style={{ padding: \"5px\" }}>Click here to upload an XML file</Text>\n      </div>\n    </Box>\n    // <Button variant=\"contained\" component=\"label\">\n    //   Upload File\n    //   <input type=\"file\" hidden />\n    // </Button>\n  );\n}\n","import { DateTime } from \"luxon\";\nimport { Element, UploadData } from \"./validateUpload\";\n\nexport interface TimeseriesDatum {\n  x: DateTime;\n  y: number;\n}\n\nexport interface Timeseries {\n  type: string;\n  unit: string;\n  dataSet: TimeseriesDatum[];\n}\n\nexport function processData(inputJson: UploadData): Record<string, Timeseries> {\n  const timeseriesCollection: Record<string, Timeseries> = {};\n\n  const timeseriesRaw = inputJson.HealthData.Record.filter(\n    (element: Element): element is RawTimeseriesDatum =>\n      element.attr.value !== undefined &&\n      element.attr.startDate !== undefined &&\n      element.attr.type !== undefined &&\n      element.attr.unit !== undefined\n  );\n\n  timeseriesRaw.forEach((element) => {\n    const timeseriesDatum = getTimeseriesDataPoint(element);\n    const dataType = trimDataType(element.attr.type);\n    const unit = element.attr.unit;\n\n    if (!(dataType in timeseriesCollection)) {\n      timeseriesCollection[dataType] = {\n        type: dataType,\n        unit: unit,\n        dataSet: [timeseriesDatum],\n      };\n    } else {\n      timeseriesCollection[dataType].dataSet.push(timeseriesDatum);\n    }\n  });\n  return sortTimeseriesCollection(timeseriesCollection);\n}\n\ninterface RawTimeseriesDatum {\n  attr: TimeseriesAttribute;\n}\n\ninterface TimeseriesAttribute {\n  type: string;\n  value: string;\n  startDate: string;\n  unit: string;\n}\n\nfunction getTimeseriesDataPoint(element: RawTimeseriesDatum): TimeseriesDatum {\n  const startTime = DateTime.fromISO(getISODateFormat(element.attr.startDate));\n  const value = Number(element.attr.value);\n  return { x: startTime, y: value };\n}\n\n// Input format is 2021-03-20 20:12:15 +1000\n// ISO input format is 2021-03-20T20:12:15+1000\n// We replace the first space with a T, and the second gets trimmed\n\nexport function getISODateFormat(appleInput: string): string {\n  const chunks = appleInput.split(\" \");\n\n  return chunks[0] + \"T\" + chunks[1] + chunks[2];\n}\n\nfunction sortTimeseriesCollection(\n  input: Record<string, Timeseries>\n): Record<string, Timeseries> {\n  for (const value of Object.values(input)) {\n    value.dataSet.sort(\n      (a: TimeseriesDatum, b: TimeseriesDatum) => a.x.diff(b.x).milliseconds\n    );\n  }\n  return input;\n}\n\nfunction trimDataType(input: string): string {\n  input = input.replace(\"HKQuantityTypeIdentifier\", \"\");\n  input = input.replace(\"HKDataType\", \"\");\n  input = input.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n  return input;\n}\n","import TextField from \"@mui/material/TextField\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\nimport React, { ReactElement } from \"react\";\n\nexport function DateInput({\n  handleChange,\n  value,\n}: {\n  handleChange: (x: Date | null) => void;\n  value: Date | null;\n}): ReactElement {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DesktopDatePicker\n        label=\"Date desktop\"\n        inputFormat=\"dd/MM/yyyy\"\n        value={value}\n        onChange={handleChange}\n        renderInput={(params) => <TextField {...params} />}\n      />\n    </LocalizationProvider>\n  );\n}\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { ReactElement } from \"react\";\n\nexport function GraphSelector({\n  timeseriesCollection,\n  selectedTimeseries,\n  setSelectedTimeseries,\n}: {\n  timeseriesCollection: Record<string, Timeseries>;\n  selectedTimeseries: string;\n  setSelectedTimeseries: React.Dispatch<React.SetStateAction<string>>;\n}): ReactElement {\n  const handleChange = (event: SelectChangeEvent) => {\n    setSelectedTimeseries(event.target.value as string);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120, maxWidth: 500, padding: 1 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"timeseries-select\">Data Set</InputLabel>\n        <Select\n          labelId=\"timeseries-select-label\"\n          id=\"timeseries-select\"\n          value={selectedTimeseries}\n          label=\"Select a data type to explore\"\n          onChange={handleChange}\n        >\n          {Object.values(timeseriesCollection).map((timeseries, index) => (\n            <MenuItem value={timeseries.type} key={index}>\n              {timeseries.type}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","export const dataTypeStandardValues: dataTypeGenerator[] = [\n  { name: \"Height\", unit: \"cm\", statistics: { mean: 180, dev: 0.01 } },\n  { name: \"Body Mass\", unit: \"kg\", statistics: { mean: 70, dev: 2 } },\n  { name: \"Heart Rate\", unit: \"count/min\", statistics: { mean: 70, dev: 15 } },\n  { name: \"Step Count\", unit: \"count\", statistics: { mean: 1000, dev: 100 } },\n  {\n    name: \"Distance Walking Running\",\n    unit: \"km\",\n    statistics: { mean: 1, dev: 0.3 },\n  },\n  {\n    name: \"Basal Energy Burned\",\n    unit: \"kJ\",\n    statistics: { mean: 300, dev: 10 },\n  },\n  {\n    name: \"Active Energy Burned\",\n    unit: \"kJ\",\n    statistics: { mean: 200, dev: 20 },\n  },\n  {\n    name: \"Flights Climbed\",\n    unit: \"count\",\n    statistics: { mean: 4, dev: 1 },\n  },\n  {\n    name: \"Apple Exercise Time\",\n    unit: \"min\",\n    statistics: { mean: 1, dev: 0.01 },\n  },\n  {\n    name: \"Resting Heart Rate\",\n    unit: \"count/min\",\n    statistics: { mean: 60, dev: 10 },\n  },\n  {\n    name: \"VO2Max\",\n    unit: \"mL/min·kg\",\n    statistics: { mean: 1, dev: 0.2 },\n  },\n  {\n    name: \"Walking Heart Rate Average\",\n    unit: \"count/min\",\n    statistics: { mean: 100, dev: 15 },\n  },\n  {\n    name: \"Environmental Audio Exposure\",\n    unit: \"dBASPL\",\n    statistics: { mean: 70, dev: 5 },\n  },\n  {\n    name: \"Headphone Audio Exposure\",\n    unit: \"dBASPL\",\n    statistics: { mean: 65, dev: 10 },\n  },\n  {\n    name: \"Walking Double Support Percentage\",\n    unit: \"%\",\n    statistics: { mean: 0.28, dev: 0.02 },\n  },\n  {\n    name: \"Six Minute Walk Test Distance\",\n    unit: \"m\",\n    statistics: { mean: 500, dev: 1 },\n  },\n  {\n    name: \"Apple Stand Time\",\n    unit: \"min\",\n    statistics: { mean: 3.5, dev: 0.5 },\n  },\n  {\n    name: \"Walking Speed\",\n    unit: \"km/hr\",\n    statistics: { mean: 4, dev: 1 },\n  },\n  {\n    name: \"Walking Step Length\",\n    unit: \"cm\",\n    statistics: { mean: 65, dev: 8 },\n  },\n  {\n    name: \"Walking Asymmetry Percentage\",\n    unit: \"%\",\n    statistics: { mean: 0.2, dev: 0.01 },\n  },\n  {\n    name: \"Stair Ascent Speed\",\n    unit: \"m/s\",\n    statistics: { mean: 0.4, dev: 0.06 },\n  },\n  {\n    name: \"Stair Descent Speed\",\n    unit: \"m/s\",\n    statistics: { mean: 0.5, dev: 0.06 },\n  },\n  {\n    name: \"Sleep Duration Goal\",\n    unit: \"hr\",\n    statistics: { mean: 7.5, dev: 0.2 },\n  },\n  {\n    name: \"Heart Rate Variability SDNN\",\n    unit: \"ms\",\n    statistics: { mean: 80, dev: 15 },\n  },\n];\n\ninterface dataTypeGenerator {\n  name: string;\n  unit: string;\n  statistics: {\n    mean: number;\n    dev: number;\n  };\n}\n","import React, { ReactElement } from \"react\";\nimport { Timeseries, TimeseriesDatum } from \"../utilities/processData\";\nimport iterator from \"@stdlib/random-iter-normal\";\nimport { DateTime, Interval } from \"luxon\";\nimport { dataTypeStandardValues } from \"../assets/standardDataTypes\";\nimport { Box } from \"@mui/material\";\nimport { Text } from \"./Text\";\n\nexport function RandomDataGenerator({\n  onDataGeneration,\n}: {\n  onDataGeneration: (input: Record<string, Timeseries>) => void;\n}): ReactElement {\n  return (\n    <Box\n      sx={{\n        borderRadius: \"16px\",\n        bgcolor: \"background.paper\",\n        borderColor: \"text.primary\",\n        m: 1,\n        border: 1,\n        width: 180,\n      }}\n      onClick={() => onDataGeneration(generateRandomDataSet())}\n    >\n      <Text style={{ padding: \"5px\" }}>Generate Random Data</Text>\n    </Box>\n  );\n}\n\nfunction generateRandomDataSet(): Record<string, Timeseries> {\n  const end = DateTime.now();\n  const start = DateTime.now().minus({ days: 20 });\n  const dates = days(Interval.fromDateTimes(start, end));\n  const timeseriesCollection: Record<string, Timeseries> = {};\n  for (const dataType of dataTypeStandardValues) {\n    const it = iterator(dataType.statistics.mean, dataType.statistics.dev);\n    const values: TimeseriesDatum[] = dates.map((date) => ({\n      x: date,\n      y: it.next().value,\n    }));\n    timeseriesCollection[dataType.name] = {\n      type: dataType.name,\n      unit: dataType.unit,\n      dataSet: values,\n    };\n  }\n  return timeseriesCollection;\n}\n\nfunction days(interval: Interval): DateTime[] {\n  let cursor = interval.start.startOf(\"day\");\n  const output: DateTime[] = [];\n  while (cursor < interval.end) {\n    output.push(cursor);\n    cursor = cursor.plus({ days: 1 });\n  }\n  return output;\n}\n","import React, { ReactElement } from \"react\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { DateTime } from \"luxon\";\nimport {\n  mean,\n  permutationTest,\n  sampleStandardDeviation,\n} from \"simple-statistics\";\n\nexport function Analytics({\n  timeseries,\n  analyticsDate,\n}: {\n  timeseries: Timeseries;\n  analyticsDate: DateTime;\n}): ReactElement {\n  const output = getSplitTimeseriesAnalytics(timeseries, analyticsDate);\n  return (\n    <div>\n      Before: Count: {output.before.count} <br />\n      Average: {output.before.average} <br />\n      Deviation: {output.before.deviation} <br />\n      After: Count: {output.after.count} <br />\n      Average: {output.after.average} <br />\n      Deviation: {output.after.deviation} <br />\n      {output.after.average && output.before.average && (\n        <div>\n          Overall Difference: {output.after.average - output.before.average}{\" \"}\n          <br />\n          This difference has a p-value of: {output.pValue}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction getAnalytics(timeseries: Timeseries): StatisticalSummary {\n  const count = timeseries.dataSet.length;\n  if (count === 0) {\n    return {\n      count: 0,\n    };\n  }\n  const average = mean(timeseries.dataSet.map((datum) => datum.y));\n  const deviation = sampleStandardDeviation(\n    timeseries.dataSet.map((datum) => datum.y)\n  );\n  return { count, average, deviation };\n}\n\nexport interface StatisticalSummary {\n  count: number;\n  average?: number;\n  deviation?: number;\n}\n\nexport interface SplitTimeseries {\n  before: Timeseries;\n  after: Timeseries;\n}\n\nexport interface SplitAnalytics {\n  before: StatisticalSummary;\n  after: StatisticalSummary;\n  pValue?: number | null;\n}\n\nfunction splitTimeseriesOnDate(\n  inputDate: DateTime,\n  timeseries: Timeseries\n): SplitTimeseries {\n  const dataSet = timeseries.dataSet;\n  if (dataSet.length === 0) {\n    return {\n      before: timeseries,\n      after: timeseries,\n    };\n  }\n  if (dataSet[0].x.diff(inputDate).milliseconds > 0) {\n    return {\n      before: {\n        ...timeseries,\n        dataSet: [],\n      },\n      after: timeseries,\n    };\n  }\n  if (dataSet[dataSet.length - 1].x.diff(inputDate).milliseconds < 0) {\n    return {\n      before: timeseries,\n      after: {\n        ...timeseries,\n        dataSet: [],\n      },\n    };\n  }\n\n  const splitIndex = dataSet.findIndex(\n    (timeseriesDatum) => timeseriesDatum.x.diff(inputDate).milliseconds > 0\n  );\n  const nonDataSetParams = {\n    type: timeseries.type,\n    unit: timeseries.unit,\n  };\n  const beforeTimeseries = {\n    ...nonDataSetParams,\n    dataSet: timeseries.dataSet.slice(0, splitIndex),\n  };\n  const afterTimeseries = {\n    ...nonDataSetParams,\n    dataSet: timeseries.dataSet.slice(splitIndex),\n  };\n  return {\n    before: beforeTimeseries,\n    after: afterTimeseries,\n  };\n}\n\nfunction getSplitTimeseriesAnalytics(\n  timeseries: Timeseries,\n  splitDate: DateTime\n): SplitAnalytics {\n  const splitTimeseries = splitTimeseriesOnDate(splitDate, timeseries);\n  const before = getAnalytics(splitTimeseries.before);\n  const after = getAnalytics(splitTimeseries.after);\n  const hypothesis =\n    before.average && after.average\n      ? before.average < after.average\n        ? \"less\"\n        : \"greater\"\n      : undefined;\n\n  if (!before.average || !after.average) {\n    return {\n      before,\n      after,\n    };\n  }\n  const pValue = permutationTest(\n    splitTimeseries.before.dataSet.map((datum) => datum.y),\n    splitTimeseries.after.dataSet.map((datum) => datum.y),\n    hypothesis\n  );\n  return {\n    before,\n    after,\n    pValue,\n  };\n}\n","import React, { ReactElement } from \"react\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\n\nexport function TimeseriesGraph({\n  timeseries,\n}: {\n  timeseries: Timeseries;\n}): ReactElement {\n  const state = {\n    labels: timeseries.dataSet.map((datum) => datum.x),\n    datasets: [\n      {\n        label: timeseries.type,\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: timeseries.dataSet.map((element) => element.y),\n      },\n    ],\n  };\n  return (\n    <Line\n      data={state}\n      options={\n        {\n          title: {\n            display: true,\n            text: timeseries.type,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n          scales: {\n            x: {\n              type: \"time\",\n              display: true,\n              title: {\n                display: true,\n              },\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: timeseries.unit,\n              },\n            },\n          },\n        } as any // eslint-disable-line @typescript-eslint/no-explicit-any\n      }\n    />\n  );\n}\n","import React, { ReactElement, useState } from \"react\";\nimport { FileUploader } from \"./FileUploader\";\nimport { processData, Timeseries } from \"../utilities/processData\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { DateInput } from \"./DateInput\";\nimport { GraphSelector } from \"./GraphSelector\";\nimport { RandomDataGenerator } from \"./RandomDataGenerator\";\nimport { DateTime } from \"luxon\";\nimport { Analytics } from \"./Analytics\";\nimport { TimeseriesGraph } from \"./TimeseriesGraph\";\n\nexport function DataContainer(): ReactElement {\n  const [timeseriesCollection, setTimeseriesCollection] =\n    useState<Record<string, Timeseries>>();\n  const [selectedTimeseries, setSelectedTimeseries] = useState<string>(\"\");\n  const [analyticsDate, setAnalyticsDate] = React.useState<DateTime | null>(\n    DateTime.now()\n  );\n\n  const handleChange = (newValue: Date | null) => {\n    if (!!newValue) {\n      setAnalyticsDate(DateTime.fromJSDate(newValue));\n    }\n  };\n  function onUpload(input: UploadData): void {\n    setTimeseriesCollection(processData(input));\n  }\n  function onDataGeneration(input: Record<string, Timeseries>): void {\n    setTimeseriesCollection(input);\n  }\n\n  return (\n    <div>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <FileUploader onUpload={onUpload} />\n        <RandomDataGenerator onDataGeneration={onDataGeneration} />\n        <DateInput\n          handleChange={handleChange}\n          value={analyticsDate?.toJSDate() ?? null}\n        />\n      </div>\n      {!!timeseriesCollection && (\n        <GraphSelector\n          timeseriesCollection={timeseriesCollection}\n          selectedTimeseries={selectedTimeseries}\n          setSelectedTimeseries={setSelectedTimeseries}\n        />\n      )}\n      {!!timeseriesCollection && !!timeseriesCollection[selectedTimeseries] && (\n        <TimeseriesGraph\n          timeseries={timeseriesCollection[selectedTimeseries]}\n        />\n      )}\n      {!!timeseriesCollection &&\n        !!timeseriesCollection[selectedTimeseries] &&\n        !!analyticsDate && (\n          <Analytics\n            timeseries={timeseriesCollection[selectedTimeseries]}\n            analyticsDate={analyticsDate}\n          />\n        )}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { PageContainer } from \"./components\";\nimport { DataContainer } from \"./components/DataContainer\";\n\nfunction App(): ReactElement {\n  return (\n    <PageContainer>\n      <DataContainer />\n    </PageContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\ndocument.title = \"Health Analytics\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}