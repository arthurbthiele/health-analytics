{"version":3,"sources":["components/PageContainer.tsx","assets/fonts.ts","assets/colors.ts","components/Text.tsx","utilities/xmlParser.ts","utilities/validateUpload.ts","components/FileUploader.tsx","utilities/daysInInterval.ts","utilities/collateTimeseriesCollectionByDay.ts","utilities/processData.ts","components/GraphSelector.tsx","assets/standardDataTypes.ts","components/RandomDataGenerator.tsx","utilities/analyticsHelpers.ts","components/Analytics.tsx","components/TimeseriesGraph.tsx","components/DataContainer.tsx","components/InfoBox.tsx","App.tsx","index.tsx"],"names":["PageContainer","children","style","width","window","innerWidth","height","innerHeight","display","alignItems","justifyContent","fontFamily","fonts","primary","small","fontSize","medium","large","color","secondary","footer","Text","parseXML","xmlData","options","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","ignoreNameSpace","allowBooleanAttributes","parseNodeValue","parseAttributeValue","trimValues","cdataTagName","cdataPositionChar","parseTrueNumberOnly","numParseOptions","hex","leadingZeros","arrayMode","attrValueProcessor","val","he","decode","isAttributeValue","tagValueProcessor","stopNodes","parser","validate","jsonObj","parse","inputJson","HealthData","Record","element","attr","type","FileUploader","onDrop","onUpload","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","setTimeout","textString","result","parsedXML","undefined","alert","readAsText","getOnDrop","useDropzone","getRootProps","getInputProps","Box","sx","borderRadius","bgcolor","borderColor","m","border","padding","daysInInterval","interval","cursor","start","startOf","output","end","push","plus","days","collateTimeseries","timeseries","startTime","dataSet","x","endTime","length","dates","Interval","fromDateTimes","collatedDataSet","startDateIndex","endDateIndex","date","dayAfter","todaysDatums","slice","y","sum","map","timeseriesToCollate","processData","timeseriesCollection","filter","value","startDate","unit","timeseriesDatum","DateTime","fromISO","appleInput","chunks","split","getISODateFormat","Number","getTimeseriesDataPoint","dataType","replace","timeseriesName","includes","collateTimeseriesCollectionByDay","input","Object","values","sort","a","b","diff","milliseconds","sortTimeseriesCollection","GraphSelector","selectedTimeseries","setSelectedTimeseries","minWidth","maxWidth","FormControl","fullWidth","InputLabel","id","Select","labelId","label","onChange","event","target","index","MenuItem","dataTypeStandardValues","name","statistics","mean","dev","RandomDataGenerator","onDataGeneration","onClick","now","minus","it","iterator","next","generateRandomDataSet","getAnalytics","count","average","datum","deviation","sampleStandardDeviation","getSplitTimeseriesAnalytics","setAnalyticsDate","maxChangeDate","differenceInAverages","runningSum","averageBefore","averageAfter","Math","abs","edgeOffset","max","maxIndex","getMaxChangeDate","splitTimeseries","inputDate","before","after","splitIndex","findIndex","nonDataSetParams","splitTimeseriesOnDate","hypothesis","pValue","permutationTest","toString","Analytics","analytics","setAnalytics","createData","useEffect","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","paddingTop","href","TimeseriesGraph","analyticsDate","state","labels","toMillis","datasets","backgroundColor","borderWidth","data","dateLine","colorProps","min","getAnalyticsDateLine","priorAverageLine","getPriorAverageLine","postAverageLine","getPostAverageLine","onHover","parsing","plugins","decimation","enabled","algorithm","samples","title","text","legend","position","scales","DataContainer","useState","setTimeseriesCollection","React","left","top","flexDirection","InfoBox","right","App","document","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4cd79817.chunk.js","sourcesContent":["import React, { ReactElement, ReactNode } from \"react\";\n\nexport const PageContainer = ({\n  children,\n}: {\n  children: ReactNode;\n}): ReactElement => (\n  <div\n    style={{\n      width: window.innerWidth,\n      height: window.innerHeight,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n  >\n    {children}\n  </div>\n);\n","import { colors } from \"./colors\";\n\nconst fontSize = {\n  footer: 12,\n  small: 14,\n  medium: 16,\n  large: 20,\n};\nconst fontFamily = \"verdana\";\nexport const fonts = {\n  primary: {\n    small: { fontSize: fontSize.small, fontFamily },\n    medium: {},\n    large: {},\n    display: { fontSize: fontSize.large, fontFamily, color: colors.red },\n  },\n  secondary: {\n    footer: { fontSize: fontSize.footer, fontFamily, color: colors.grey },\n    small: {},\n    medium: {},\n    large: {},\n    display: {},\n  },\n};\n","export const colors = {\n  red: \"#d63e13\",\n  green: \"green\",\n  lightBlue: \"#99c3fa\",\n  darkBlue: \"#8ab0e1\",\n  grey: \"#333333\",\n};\n","import { fonts } from \"../assets/fonts\";\nimport React, { CSSProperties, ReactElement, ReactNode } from \"react\";\n\nexport const Text = ({\n  style,\n  children,\n}: {\n  style?: CSSProperties;\n  children: ReactNode;\n}): ReactElement => (\n  <div style={{ ...fonts.primary.small, ...style }}>{children}</div>\n);\n","import he from \"he\";\n\nimport parser from \"fast-xml-parser\";\nimport { UploadData, validate } from \"./validateUpload\";\n\nexport const parseXML = (xmlData: string): UploadData | undefined => {\n  interface Options {\n    ignoreAttributes: boolean;\n    attrValueProcessor: (val: string) => string;\n    attrNodeName: string;\n    trimValues: boolean;\n    textNodeName: string;\n    cdataTagName: string;\n    attributeNamePrefix: string;\n    parseAttributeValue: boolean;\n    parseNodeValue: boolean;\n    parseTrueNumberOnly: boolean;\n    cdataPositionChar: string;\n    arrayMode: boolean;\n    numParseOptions: { hex: boolean; leadingZeros: boolean };\n    tagValueProcessor: (val: string) => string;\n    ignoreNameSpace: boolean;\n    allowBooleanAttributes: boolean;\n    stopNodes: string[];\n  }\n\n  const options: Options = {\n    attributeNamePrefix: \"\",\n    attrNodeName: \"attr\", //default is 'false'\n    textNodeName: \"#text\",\n    ignoreAttributes: false,\n    ignoreNameSpace: false,\n    allowBooleanAttributes: false,\n    parseNodeValue: true,\n    parseAttributeValue: false,\n    trimValues: true,\n    cdataTagName: \"__cdata\", //default is 'false'\n    cdataPositionChar: \"\\\\c\",\n    parseTrueNumberOnly: false,\n    numParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      //skipLike: /\\+[0-9]{10}/\n    },\n    arrayMode: false, //\"strict\"\n    attrValueProcessor: (val) => he.decode(val, { isAttributeValue: true }), //default is a=>a\n    tagValueProcessor: (val) => he.decode(val), //default is a=>a\n    stopNodes: [\"parse-me-as-string\"],\n  };\n\n  if (parser.validate(xmlData) === true) {\n    //optional (it'll return an object in case it's not valid)\n    const jsonObj = parser.parse(xmlData, options);\n    if (validate(jsonObj)) {\n      return jsonObj;\n    }\n  }\n  return undefined;\n};\n","/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction validate(inputJson: Record<string, any>): inputJson is UploadData {\n  if (!inputJson.HealthData) return false;\n  if (!inputJson.HealthData.Record) return false;\n  for (const element of inputJson.HealthData.Record) {\n    if (!element.attr) return false;\n    if (!element.attr.type) return false;\n  }\n  return true;\n}\n\ninterface UploadData {\n  HealthData: {\n    Record: Element[];\n  };\n}\n\ninterface Element {\n  attr: Attribute;\n}\n\ninterface Attribute {\n  type: string;\n  value?: string;\n  startDate?: string;\n  unit?: string;\n}\n\nexport { validate };\nexport type { UploadData, Element, Attribute };\n","import React, { ReactElement, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Text } from \"./Text\";\nimport { parseXML } from \"../utilities/xmlParser\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { Box } from \"@mui/material\";\n\nfunction getOnDrop(onUpload: (input: UploadData) => void) {\n  return useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () =>\n        setTimeout(() => {\n          const textString = reader.result;\n          const parsedXML = parseXML(textString as string);\n          if (parsedXML !== undefined) {\n            onUpload(parsedXML);\n          } else {\n            alert(\"Uploaded file does not have expected properties\");\n          }\n        }, 1);\n      reader.readAsText(file);\n    });\n  }, []);\n}\n\nexport function FileUploader({\n  onUpload,\n}: {\n  onUpload: (input: UploadData) => void;\n}): ReactElement {\n  const onDrop = getOnDrop(onUpload);\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\n\n  return (\n    <Box\n      sx={{\n        borderRadius: \"16px\",\n        bgcolor: \"background.paper\",\n        borderColor: \"text.primary\",\n        m: 1,\n        border: 1,\n        width: 240,\n      }}\n    >\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <Text style={{ padding: \"5px\" }}>Click here to upload an XML file</Text>\n      </div>\n    </Box>\n    // <Button variant=\"contained\" component=\"label\">\n    //   Upload File\n    //   <input type=\"file\" hidden />\n    // </Button>\n  );\n}\n","import { DateTime, Interval } from \"luxon\";\n\nexport function daysInInterval(interval: Interval): DateTime[] {\n  let cursor = interval.start.startOf(\"day\");\n  const output: DateTime[] = [];\n  while (cursor < interval.end) {\n    output.push(cursor);\n    cursor = cursor.plus({ days: 1 });\n  }\n  return output;\n}\n","import { Timeseries, TimeseriesDatum } from \"./processData\";\nimport { daysInInterval } from \"./daysInInterval\";\nimport { Interval } from \"luxon\";\nimport { sum } from \"simple-statistics\";\n\nexport function collateTimeseriesCollectionByDay(\n  timeseriesCollection: Record<string, Timeseries>\n): Record<string, Timeseries> {\n  for (const timeseriesName in timeseriesCollection) {\n    if (timeseriesToCollate.includes(timeseriesName)) {\n      console.log(timeseriesName);\n      timeseriesCollection[timeseriesName] = collateTimeseries(\n        timeseriesCollection[timeseriesName]\n      );\n    }\n  }\n  return timeseriesCollection;\n}\n\nfunction collateTimeseries(timeseries: Timeseries): Timeseries {\n  const startTime = timeseries.dataSet[0].x;\n  const endTime = timeseries.dataSet[timeseries.dataSet.length - 1].x;\n  const dates = daysInInterval(Interval.fromDateTimes(startTime, endTime));\n  const collatedDataSet: TimeseriesDatum[] = [];\n  let startDateIndex = 0;\n  let endDateIndex = 0;\n\n  for (const date of dates) {\n    while (timeseries.dataSet[startDateIndex].x < date) {\n      startDateIndex += 1;\n    }\n    const dayAfter = date.plus({ days: 1 });\n    while (\n      !!timeseries.dataSet[endDateIndex] &&\n      timeseries.dataSet[endDateIndex].x < dayAfter\n    ) {\n      endDateIndex += 1;\n    }\n\n    const todaysDatums = timeseries.dataSet.slice(\n      startDateIndex,\n      endDateIndex - 1\n    );\n\n    collatedDataSet.push({\n      x: date,\n      y: sum(todaysDatums.map((element) => element.y)),\n    });\n  }\n  return { ...timeseries, dataSet: collatedDataSet };\n}\n\nconst timeseriesToCollate = [\n  \"Step Count\",\n  \"Distance Walking Running\",\n  \"Basal Energy Burned\",\n  \"Active Energy Burned\",\n  \"Flights Climbed\",\n];\n","import { DateTime } from \"luxon\";\nimport { Element, UploadData } from \"./validateUpload\";\nimport { collateTimeseriesCollectionByDay } from \"./collateTimeseriesCollectionByDay\";\n\nexport interface TimeseriesDatum {\n  x: DateTime;\n  y: number;\n}\n\nexport interface Timeseries {\n  type: string;\n  unit: string;\n  dataSet: TimeseriesDatum[];\n}\n\nexport function processData(inputJson: UploadData): Record<string, Timeseries> {\n  const timeseriesCollection: Record<string, Timeseries> = {};\n\n  const timeseriesRaw = inputJson.HealthData.Record.filter(\n    (element: Element): element is RawTimeseriesDatum =>\n      element.attr.value !== undefined &&\n      element.attr.startDate !== undefined &&\n      element.attr.type !== undefined &&\n      element.attr.unit !== undefined\n  );\n\n  timeseriesRaw.forEach((element) => {\n    const timeseriesDatum = getTimeseriesDataPoint(element);\n    const dataType = trimDataType(element.attr.type);\n    const unit = element.attr.unit;\n\n    if (!(dataType in timeseriesCollection)) {\n      timeseriesCollection[dataType] = {\n        type: dataType,\n        unit: unit,\n        dataSet: [timeseriesDatum],\n      };\n    } else {\n      timeseriesCollection[dataType].dataSet.push(timeseriesDatum);\n    }\n  });\n  return collateTimeseriesCollectionByDay(\n    sortTimeseriesCollection(timeseriesCollection)\n  );\n}\n\ninterface RawTimeseriesDatum {\n  attr: TimeseriesAttribute;\n}\n\ninterface TimeseriesAttribute {\n  type: string;\n  value: string;\n  startDate: string;\n  unit: string;\n}\n\nfunction getTimeseriesDataPoint(element: RawTimeseriesDatum): TimeseriesDatum {\n  const startTime = DateTime.fromISO(getISODateFormat(element.attr.startDate));\n  const value = Number(element.attr.value);\n  return { x: startTime, y: value };\n}\n\n// Input format is 2021-03-20 20:12:15 +1000\n// ISO input format is 2021-03-20T20:12:15+1000\n// We replace the first space with a T, and the second gets trimmed\n\nexport function getISODateFormat(appleInput: string): string {\n  const chunks = appleInput.split(\" \");\n\n  return chunks[0] + \"T\" + chunks[1] + chunks[2];\n}\n\nfunction sortTimeseriesCollection(\n  input: Record<string, Timeseries>\n): Record<string, Timeseries> {\n  for (const value of Object.values(input)) {\n    value.dataSet.sort(\n      (a: TimeseriesDatum, b: TimeseriesDatum) => a.x.diff(b.x).milliseconds\n    );\n  }\n  return input;\n}\n\nfunction trimDataType(input: string): string {\n  input = input.replace(\"HKQuantityTypeIdentifier\", \"\");\n  input = input.replace(\"HKDataType\", \"\");\n  input = input.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n  return input;\n}\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { ReactElement } from \"react\";\n\nexport function GraphSelector({\n  timeseriesCollection,\n  selectedTimeseries,\n  setSelectedTimeseries,\n}: {\n  timeseriesCollection: Record<string, Timeseries>;\n  selectedTimeseries: string;\n  setSelectedTimeseries: React.Dispatch<React.SetStateAction<string>>;\n}): ReactElement {\n  const handleChange = (event: SelectChangeEvent) => {\n    setSelectedTimeseries(event.target.value as string);\n  };\n\n  return (\n    <Box sx={{ minWidth: 120, maxWidth: 500, padding: 1 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"timeseries-select\">Data Set</InputLabel>\n        <Select\n          labelId=\"timeseries-select-label\"\n          id=\"timeseries-select\"\n          value={selectedTimeseries}\n          label=\"Select a data type to explore\"\n          onChange={handleChange}\n        >\n          {Object.values(timeseriesCollection).map((timeseries, index) => (\n            <MenuItem value={timeseries.type} key={index}>\n              {timeseries.type}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Box>\n  );\n}\n","export const dataTypeStandardValues: dataTypeGenerator[] = [\n  { name: \"Height\", unit: \"cm\", statistics: { mean: 180, dev: 0.01 } },\n  { name: \"Body Mass\", unit: \"kg\", statistics: { mean: 70, dev: 2 } },\n  { name: \"Heart Rate\", unit: \"count/min\", statistics: { mean: 70, dev: 15 } },\n  { name: \"Step Count\", unit: \"count\", statistics: { mean: 1000, dev: 100 } },\n  {\n    name: \"Distance Walking Running\",\n    unit: \"km\",\n    statistics: { mean: 1, dev: 0.3 },\n  },\n  {\n    name: \"Basal Energy Burned\",\n    unit: \"kJ\",\n    statistics: { mean: 300, dev: 10 },\n  },\n  {\n    name: \"Active Energy Burned\",\n    unit: \"kJ\",\n    statistics: { mean: 200, dev: 20 },\n  },\n  {\n    name: \"Flights Climbed\",\n    unit: \"count\",\n    statistics: { mean: 4, dev: 1 },\n  },\n  {\n    name: \"Apple Exercise Time\",\n    unit: \"min\",\n    statistics: { mean: 1, dev: 0.01 },\n  },\n  {\n    name: \"Resting Heart Rate\",\n    unit: \"count/min\",\n    statistics: { mean: 60, dev: 10 },\n  },\n  {\n    name: \"VO2Max\",\n    unit: \"mL/min·kg\",\n    statistics: { mean: 1, dev: 0.2 },\n  },\n  {\n    name: \"Walking Heart Rate Average\",\n    unit: \"count/min\",\n    statistics: { mean: 100, dev: 15 },\n  },\n  {\n    name: \"Environmental Audio Exposure\",\n    unit: \"dBASPL\",\n    statistics: { mean: 70, dev: 5 },\n  },\n  {\n    name: \"Headphone Audio Exposure\",\n    unit: \"dBASPL\",\n    statistics: { mean: 65, dev: 10 },\n  },\n  {\n    name: \"Walking Double Support Percentage\",\n    unit: \"%\",\n    statistics: { mean: 0.28, dev: 0.02 },\n  },\n  {\n    name: \"Six Minute Walk Test Distance\",\n    unit: \"m\",\n    statistics: { mean: 500, dev: 1 },\n  },\n  {\n    name: \"Apple Stand Time\",\n    unit: \"min\",\n    statistics: { mean: 3.5, dev: 0.5 },\n  },\n  {\n    name: \"Walking Speed\",\n    unit: \"km/hr\",\n    statistics: { mean: 4, dev: 1 },\n  },\n  {\n    name: \"Walking Step Length\",\n    unit: \"cm\",\n    statistics: { mean: 65, dev: 8 },\n  },\n  {\n    name: \"Walking Asymmetry Percentage\",\n    unit: \"%\",\n    statistics: { mean: 0.2, dev: 0.01 },\n  },\n  {\n    name: \"Stair Ascent Speed\",\n    unit: \"m/s\",\n    statistics: { mean: 0.4, dev: 0.06 },\n  },\n  {\n    name: \"Stair Descent Speed\",\n    unit: \"m/s\",\n    statistics: { mean: 0.5, dev: 0.06 },\n  },\n  {\n    name: \"Sleep Duration Goal\",\n    unit: \"hr\",\n    statistics: { mean: 7.5, dev: 0.2 },\n  },\n  {\n    name: \"Heart Rate Variability SDNN\",\n    unit: \"ms\",\n    statistics: { mean: 80, dev: 15 },\n  },\n];\n\ninterface dataTypeGenerator {\n  name: string;\n  unit: string;\n  statistics: {\n    mean: number;\n    dev: number;\n  };\n}\n","import React, { ReactElement } from \"react\";\nimport { Timeseries, TimeseriesDatum } from \"../utilities/processData\";\nimport iterator from \"@stdlib/random-iter-normal\";\nimport { DateTime, Interval } from \"luxon\";\nimport { dataTypeStandardValues } from \"../assets/standardDataTypes\";\nimport { Box } from \"@mui/material\";\nimport { Text } from \"./Text\";\nimport { daysInInterval } from \"../utilities/daysInInterval\";\n\nexport function RandomDataGenerator({\n  onDataGeneration,\n}: {\n  onDataGeneration: (input: Record<string, Timeseries>) => void;\n}): ReactElement {\n  return (\n    <Box\n      sx={{\n        borderRadius: \"16px\",\n        bgcolor: \"background.paper\",\n        borderColor: \"text.primary\",\n        m: 1,\n        border: 1,\n        width: 180,\n      }}\n      onClick={() => onDataGeneration(generateRandomDataSet())}\n    >\n      <Text style={{ padding: \"5px\" }}>Generate Random Data</Text>\n    </Box>\n  );\n}\n\nfunction generateRandomDataSet(): Record<string, Timeseries> {\n  const end = DateTime.now();\n  const start = DateTime.now().minus({ days: 200 });\n  const dates = daysInInterval(Interval.fromDateTimes(start, end));\n  const timeseriesCollection: Record<string, Timeseries> = {};\n  for (const dataType of dataTypeStandardValues) {\n    const it = iterator(dataType.statistics.mean, dataType.statistics.dev);\n    const values: TimeseriesDatum[] = dates.map((date) => ({\n      x: date,\n      y: it.next().value,\n    }));\n    timeseriesCollection[dataType.name] = {\n      type: dataType.name,\n      unit: dataType.unit,\n      dataSet: values,\n    };\n  }\n  return timeseriesCollection;\n}\n","import { DateTime } from \"luxon\";\nimport { Timeseries } from \"./processData\";\nimport {\n  mean,\n  permutationTest,\n  sampleStandardDeviation,\n} from \"simple-statistics\";\nimport React from \"react\";\n\nfunction getAnalytics(timeseries: Timeseries): StatisticalSummary {\n  const count = timeseries.dataSet.length;\n  if (count === 0) {\n    return {\n      count,\n    };\n  }\n\n  const average = mean(timeseries.dataSet.map((datum) => datum.y));\n  if (count === 1) {\n    return {\n      count,\n      average,\n    };\n  }\n  const deviation = sampleStandardDeviation(\n    timeseries.dataSet.map((datum) => datum.y)\n  );\n  return { count, average, deviation };\n}\n\nexport interface StatisticalSummary {\n  count: number;\n  average?: number;\n  deviation?: number;\n}\n\nexport interface SplitTimeseries {\n  before: Timeseries;\n  after: Timeseries;\n}\n\nexport interface SplitAnalytics {\n  before: StatisticalSummary;\n  after: StatisticalSummary;\n  pValue?: string | null;\n}\n\nfunction splitTimeseriesOnDate(\n  inputDate: DateTime,\n  timeseries: Timeseries\n): SplitTimeseries {\n  const dataSet = timeseries.dataSet;\n  if (dataSet.length === 0) {\n    return {\n      before: timeseries,\n      after: timeseries,\n    };\n  }\n  if (dataSet[0].x.diff(inputDate).milliseconds > 0) {\n    return {\n      before: {\n        ...timeseries,\n        dataSet: [],\n      },\n      after: timeseries,\n    };\n  }\n  if (dataSet[dataSet.length - 1].x.diff(inputDate).milliseconds < 0) {\n    return {\n      before: timeseries,\n      after: {\n        ...timeseries,\n        dataSet: [],\n      },\n    };\n  }\n\n  const splitIndex = dataSet.findIndex(\n    (timeseriesDatum) => timeseriesDatum.x.diff(inputDate).milliseconds > 0\n  );\n  const nonDataSetParams = {\n    type: timeseries.type,\n    unit: timeseries.unit,\n  };\n  const beforeTimeseries = {\n    ...nonDataSetParams,\n    dataSet: timeseries.dataSet.slice(0, splitIndex),\n  };\n  const afterTimeseries = {\n    ...nonDataSetParams,\n    dataSet: timeseries.dataSet.slice(splitIndex),\n  };\n  return {\n    before: beforeTimeseries,\n    after: afterTimeseries,\n  };\n}\n\nexport function getSplitTimeseriesAnalytics(\n  timeseries: Timeseries,\n  setAnalyticsDate: React.Dispatch<React.SetStateAction<DateTime | null>>\n): SplitAnalytics {\n  const maxChangeDate = getMaxChangeDate(timeseries);\n  setAnalyticsDate(maxChangeDate);\n  const splitTimeseries = splitTimeseriesOnDate(maxChangeDate, timeseries);\n  const before = getAnalytics(splitTimeseries.before);\n  const after = getAnalytics(splitTimeseries.after);\n  const hypothesis =\n    before.average && after.average\n      ? before.average < after.average\n        ? \"less\"\n        : \"greater\"\n      : undefined;\n\n  if (!before.average || !after.average) {\n    return {\n      before,\n      after,\n    };\n  }\n  const pValue = permutationTest(\n    splitTimeseries.before.dataSet.map((datum) => datum.y),\n    splitTimeseries.after.dataSet.map((datum) => datum.y),\n    hypothesis\n  );\n  const pValueOutput = pValue < 0.0001 ? \"<0.0001\" : pValue.toString();\n  return {\n    before,\n    after,\n    pValue: pValueOutput,\n  };\n}\n\nfunction getMaxChangeDate(timeseries: Timeseries): DateTime {\n  let sum = 0;\n  timeseries.dataSet.forEach((element) => {\n    sum = sum + element.y;\n  });\n\n  const differenceInAverages: number[] = [];\n  let runningSum = 0;\n  timeseries.dataSet.forEach((value, index) => {\n    runningSum += value.y;\n    const averageBefore = runningSum / (index + 1);\n    const averageAfter =\n      (sum - runningSum) / (timeseries.dataSet.length - index - 1);\n    differenceInAverages.push(Math.abs(averageAfter - averageBefore));\n  });\n  const edgeOffset = 20;\n  let max = 0;\n  let maxIndex = 0;\n  differenceInAverages\n    .slice(edgeOffset, differenceInAverages.length - edgeOffset)\n    .forEach((value, index) => {\n      if (value > max) {\n        maxIndex = index;\n        max = value;\n      }\n    });\n  return timeseries.dataSet[maxIndex + edgeOffset].x;\n}\n","import React, { ReactElement, useEffect } from \"react\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { DateTime } from \"luxon\";\nimport {\n  getSplitTimeseriesAnalytics,\n  SplitAnalytics,\n} from \"../utilities/analyticsHelpers\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\n\nexport function Analytics({\n  timeseries,\n  setAnalyticsDate,\n  analytics,\n  setAnalytics,\n}: {\n  timeseries: Timeseries;\n  setAnalyticsDate: React.Dispatch<React.SetStateAction<DateTime | null>>;\n  analytics: SplitAnalytics | undefined;\n  setAnalytics: React.Dispatch<\n    React.SetStateAction<SplitAnalytics | undefined>\n  >;\n}): ReactElement {\n  useEffect(() => {\n    setTimeout(() => {\n      setAnalytics(getSplitTimeseriesAnalytics(timeseries, setAnalyticsDate));\n    }, 1);\n  }, [timeseries]);\n\n  function createData(\n    name: string,\n    count: number,\n    average: number | string,\n    deviation: number | string\n  ) {\n    return { name, count, average, deviation };\n  }\n\n  const rows = [\n    createData(\n      \"Analysis Prior to Selected Date\",\n      analytics?.before.count || 0,\n      analytics?.before.average || \"-\",\n      analytics?.before.deviation || \"-\"\n    ),\n    createData(\n      \"Analysis After Selected Date\",\n      analytics?.after.count || 0,\n      analytics?.after.average || \"-\",\n      analytics?.after.deviation || \"-\"\n    ),\n  ];\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Analysis Section</TableCell>\n              <TableCell align=\"right\">Record Count</TableCell>\n              <TableCell align=\"right\">Mean</TableCell>\n              <TableCell align=\"right\">Sample Standard Deviation</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow\n                key={row.name}\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"right\">{row.count}</TableCell>\n                <TableCell align=\"right\">{row.average}</TableCell>\n                <TableCell align=\"right\">{row.deviation}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {analytics?.pValue !== undefined && (\n        <div style={{ paddingTop: 10 }}>\n          Under a{\" \"}\n          <a href=\"https://en.wikipedia.org/wiki/Permutation_test\">\n            Permutation Test\n          </a>\n          , this data separation has a p-value of {analytics?.pValue}. <br />\n          This means that a difference in value of this great or greater has a{\" \"}\n          {analytics?.pValue} chance of occurring if the underlying populations\n          are identical. In general, a lower p-value suggests that there is a\n          meaningful difference between the two populations.\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { Timeseries } from \"../utilities/processData\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-adapter-luxon\";\nimport { DateTime } from \"luxon\";\nimport { SplitAnalytics } from \"../utilities/analyticsHelpers\";\n\nexport interface ChartDataSet {\n  label?: string;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderWidth?: number;\n  data: { x: number; y: number }[];\n}\n\nexport function TimeseriesGraph({\n  timeseries,\n  analyticsDate,\n  analytics,\n}: {\n  timeseries: Timeseries;\n  analyticsDate: DateTime | null;\n  analytics: SplitAnalytics | undefined;\n}): ReactElement {\n  const state: {\n    labels: number[];\n    datasets: ChartDataSet[];\n  } = {\n    labels: timeseries.dataSet.map((datum) => datum.x.toMillis()),\n    datasets: [\n      {\n        label: timeseries.type,\n        backgroundColor: \"rgba(75,192,192,1)\",\n        borderColor: \"rgba(0,0,0,1)\",\n        borderWidth: 2,\n        data: timeseries.dataSet.map((element) => ({\n          x: element.x.toMillis(),\n          y: element.y,\n        })),\n      },\n    ],\n  };\n\n  if (\n    analyticsDate &&\n    (analytics?.before?.count ?? 0 > 0) &&\n    (analytics?.after?.count ?? 0 > 0)\n  ) {\n    const dateLine = getAnalyticsDateLine(analyticsDate, timeseries);\n    const priorAverageLine = getPriorAverageLine(\n      analyticsDate,\n      timeseries,\n      analytics\n    );\n    const postAverageLine = getPostAverageLine(\n      analyticsDate,\n      timeseries,\n      analytics\n    );\n    state.datasets.push(dateLine, priorAverageLine, postAverageLine);\n  }\n\n  return (\n    <Line\n      data={state}\n      options={\n        {\n          onHover: null,\n          parsing: false,\n          plugins: {\n            decimation: {\n              enabled: true,\n              algorithm: \"lttb\",\n              samples: 1000,\n            },\n          },\n          title: {\n            display: true,\n            text: timeseries.type,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n          scales: {\n            x: {\n              type: \"time\",\n              display: true,\n              title: {\n                display: true,\n              },\n            },\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: timeseries.unit,\n              },\n            },\n          },\n        } as any // eslint-disable-line @typescript-eslint/no-explicit-any\n      }\n    />\n  );\n}\n\nfunction getAnalyticsDateLine(\n  analyticsDate: DateTime,\n  timeseries: Timeseries\n): ChartDataSet {\n  return {\n    label: \"Analytics Date\",\n    ...colorProps,\n    data: [\n      {\n        x: analyticsDate.toMillis(),\n        y: Math.max(...timeseries.dataSet.map((element) => element.y)),\n      },\n      {\n        x: analyticsDate.toMillis(),\n        y: Math.min(...timeseries.dataSet.map((element) => element.y)),\n      },\n    ],\n  };\n}\n\nfunction getPriorAverageLine(\n  analyticsDate: DateTime,\n  timeseries: Timeseries,\n  analytics: SplitAnalytics | undefined\n): ChartDataSet {\n  return {\n    label: \"Average Before\",\n    ...colorProps,\n    data: [\n      {\n        x: timeseries.dataSet[0].x.toMillis(),\n        y: analytics?.before.average ?? 0,\n      },\n      {\n        x: analyticsDate.toMillis(),\n        y: analytics?.before.average ?? 0,\n      },\n    ],\n  };\n}\n\nfunction getPostAverageLine(\n  analyticsDate: DateTime,\n  timeseries: Timeseries,\n  analytics: SplitAnalytics | undefined\n): ChartDataSet {\n  return {\n    label: \"Average After\",\n    ...colorProps,\n    data: [\n      {\n        x: analyticsDate.toMillis(),\n        y: analytics?.after.average ?? 0,\n      },\n      {\n        x: timeseries.dataSet[timeseries.dataSet.length - 1].x.toMillis(),\n        y: analytics?.after.average ?? 0,\n      },\n    ],\n  };\n}\n\nconst colorProps = {\n  borderColor: \"rgba(255,0,0,0.5)\",\n  backgroundColor: \"rgba(255,0,0,0.5)\",\n};\n","import React, { ReactElement, useState } from \"react\";\nimport { FileUploader } from \"./FileUploader\";\nimport { processData, Timeseries } from \"../utilities/processData\";\nimport { UploadData } from \"../utilities/validateUpload\";\nimport { GraphSelector } from \"./GraphSelector\";\nimport { RandomDataGenerator } from \"./RandomDataGenerator\";\nimport { Analytics } from \"./Analytics\";\nimport { TimeseriesGraph } from \"./TimeseriesGraph\";\nimport { SplitAnalytics } from \"../utilities/analyticsHelpers\";\nimport { DateTime } from \"luxon\";\n\nexport function DataContainer(): ReactElement {\n  const [timeseriesCollection, setTimeseriesCollection] =\n    useState<Record<string, Timeseries>>();\n  const [selectedTimeseries, setSelectedTimeseries] = useState<string>(\"\");\n  const [analyticsDate, setAnalyticsDate] = React.useState<DateTime | null>(\n    DateTime.now()\n  );\n  const [analytics, setAnalytics] = useState<SplitAnalytics>();\n\n  function onUpload(input: UploadData): void {\n    setTimeseriesCollection(processData(input));\n  }\n  function onDataGeneration(input: Record<string, Timeseries>): void {\n    setTimeseriesCollection(input);\n  }\n\n  return (\n    <div\n      style={{\n        padding: 24,\n        width: \"60%\",\n        height: \"100%\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n      }}\n    >\n      {\" \"}\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <FileUploader onUpload={onUpload} />\n        <RandomDataGenerator onDataGeneration={onDataGeneration} />\n      </div>\n      {!!timeseriesCollection && (\n        <GraphSelector\n          timeseriesCollection={timeseriesCollection}\n          selectedTimeseries={selectedTimeseries}\n          setSelectedTimeseries={setSelectedTimeseries}\n        />\n      )}\n      {!!timeseriesCollection && !!timeseriesCollection[selectedTimeseries] && (\n        <TimeseriesGraph\n          timeseries={timeseriesCollection[selectedTimeseries]}\n          analyticsDate={analyticsDate}\n          analytics={analytics}\n        />\n      )}\n      {!!timeseriesCollection &&\n        !!timeseriesCollection[selectedTimeseries] &&\n        !!analyticsDate && (\n          <Analytics\n            timeseries={timeseriesCollection[selectedTimeseries]}\n            setAnalyticsDate={setAnalyticsDate}\n            analytics={analytics}\n            setAnalytics={setAnalytics}\n          />\n        )}\n    </div>\n  );\n}\n","import { Text } from \"./Text\";\nimport React, { ReactElement } from \"react\";\n\nexport function InfoBox(): ReactElement {\n  return (\n    <Text\n      style={{\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        width: \"30%\",\n        padding: 50,\n        fontSize: \"large\",\n      }}\n    >\n      The Apple Watch gathers a lot of useful data. However, the inbuilt data\n      analysis is missing some features I want. I have made this site in an\n      attempt to create some of those features. These include:\n      <ul>\n        <li>\n          Basic statistical summaries, like averages and standard deviations.{\" \"}\n        </li>\n        <li>\n          Splitting input data on a supplied date, and testing to see if there\n          has been a significant change in the timeseries before vs. after the\n          supplied date. If so, I want to see the nature of that change.{\" \"}\n        </li>\n        <li>Clearer graphical visualisations.</li>\n      </ul>\n      If you have an Apple Watch and want to use this site, first{\" \"}\n      <a href=\"https://www.computerworld.com/article/2889310/how-to-export-apple-health-data-as-a-document-to-share.html?page=2\">\n        export\n      </a>{\" \"}\n      your data. Then, use the button at the top left to upload the main .xml\n      file in the generated .zip. Depending on the file size, this may take some\n      time (~10s for my 100MB file). You can then browse through your data.{\" \"}\n      <br />\n      If you want to test the features without uploading data, click the\n      Generate Random Data button. This generates reasonably realistic data for\n      the last 201 days, on which data analysis can be done. To use the data\n      analysis features, set the datepicker to a date where you think something\n      might have changed (e.g. started a new medication, started a gym program,\n      etc). Note that this feature will only work if you provide a date that is\n      within the range of your data set.\n      <br />\n      This is an open source project. The code is stored{\" \"}\n      <a href=\"https://github.com/arthurbthiele/health-monitor\">here</a>. Please\n      suggest changes as Github issues there, or send me an email at: <br />\n      arthurbthiele (at) gmail.com\n      <br />\n      All calculations are performed entirely in browser, and no information is\n      collected or stored about any user anywhere but their browser. No\n      information is retained after a user ends their session. <br />\n      This site is intended mainly to satisfy curiosity - if you are in need of\n      health advice, please consult a medical professional.\n    </Text>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { PageContainer } from \"./components\";\nimport { DataContainer } from \"./components/DataContainer\";\nimport { InfoBox } from \"./components/InfoBox\";\n\nfunction App(): ReactElement {\n  return (\n    <PageContainer>\n      <DataContainer />\n      <InfoBox />\n    </PageContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\ndocument.title = \"Health Analytics\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}